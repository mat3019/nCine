variables:
  libraries_branch: libraries-OS-COMPILER
  deploy_message:
    "Push artifact from Azure Pipelines build $(Build.BuildNumber) with id $(Build.BuildId)

     - nCine artifact from branch '$(Build.SourceBranchName)' with commit id $(Build.SourceVersion)"
  deploy_branch: nCine-BRANCHNAME-OS-COMPILER
  ndk_version: r21d

jobs:
- job: Linux_macOS
  displayName: Linux and macOS

  strategy:
    matrix:
      Linux GCC Debug:
        imageName: 'ubuntu-18.04'
        CC: gcc
        CXX: g++
        BuildType: Debug

      Linux GCC Release:
        imageName: 'ubuntu-18.04'
        CC: gcc
        CXX: g++
        BuildType: Release

      Linux GCC DevDist:
        imageName: 'ubuntu-18.04'
        CC: gcc
        CXX: g++
        BuildType: DevDist

      Linux Clang Debug:
        imageName: 'ubuntu-18.04'
        CC: clang
        CXX: clang++
        BuildType: Debug

      Linux Clang Release:
        imageName: 'ubuntu-18.04'
        CC: clang
        CXX: clang++
        BuildType: Release

      Linux Clang DevDist:
        imageName: 'ubuntu-18.04'
        CC: clang
        CXX: clang++
        BuildType: DevDist

      macOS Debug:
        imageName: 'macOS-10.14'
        BuildType: Debug

      macOS Release:
        imageName: 'macOS-10.14'
        BuildType: Release

      macOS DevDist:
        imageName: 'macOS-10.14'
        BuildType: DevDist

  pool:
    vmImage: $(imageName)

  steps:
  - script: |
      sudo apt-get update
      sudo apt-get install -y libgl1-mesa-dev
      if [ "$(BuildType)" == "DevDist" ]; then
        sudo apt-get install -y doxygen graphviz
      fi

    displayName: 'Install Build Dependencies on Linux'
    condition: eq( variables['Agent.OS'], 'Linux' )

  - script: |
      curl -fsSL https://cmake.org/files/v3.16/cmake-3.16.9-Linux-x86_64.sh -o cmakeinstall.sh && \
      chmod +x cmakeinstall.sh && \
      sudo ./cmakeinstall.sh --prefix=/usr/local --exclude-subdir && \
      rm cmakeinstall.sh

    displayName: 'Install Latest CMake on Linux'
    condition: eq( variables['Agent.OS'], 'Linux' )

  - script: |
      brew update
      brew install doxygen
      brew install graphviz

    displayName: 'Install Build Dependencies on macOS'
    condition: and( eq( variables['BuildType'], 'DevDist' ), eq( variables['Agent.OS'], 'Darwin' ) )

  - script: |
      git fetch --unshallow || true

    displayName: 'Unshallow Git Repository for Versioning'
    condition: eq( variables['BuildType'], 'DevDist' )

  - script: |
      if [ "$(Agent.OS)" == "Linux" ]; then
        export OS=linux
      elif [ "$(Agent.OS)" == "Darwin" ]; then
        export OS=darwin
        export CC=appleclang
      fi

      export LIBRARIES_BRANCH=`echo $LIBRARIES_BRANCH | sed 's/OS/'"$OS"'/'`
      export LIBRARIES_BRANCH=`echo $LIBRARIES_BRANCH | sed 's/COMPILER/'"$CC"'/'`

      cd ..
      git clone https://github.com/nCine/nCine-libraries-artifacts.git
      cd nCine-libraries-artifacts
      git checkout $LIBRARIES_BRANCH
      LIBRARIES_FILE=$(ls -t | head -n 1) && tar xpzf $LIBRARIES_FILE
      mv nCine-external ..
      git checkout android-libraries-armeabi-v7a
      LIBRARIES_FILE=$(ls -t | head -n 1) && tar xpzf $LIBRARIES_FILE
      git checkout android-libraries-arm64-v8a
      LIBRARIES_FILE=$(ls -t | head -n 1) && tar xpzf $LIBRARIES_FILE
      git checkout android-libraries-x86_64
      LIBRARIES_FILE=$(ls -t | head -n 1) && tar xpzf $LIBRARIES_FILE
      mv nCine-android-external ..
      cd ..
      rm -rf nCine-libraries-artifacts

      git clone https://github.com/nCine/nCine-data.git

    displayName: 'Download nCine-libraries Artifacts and nCine-data'

  - script: |
      if [ "$(Agent.OS)" == "Linux" ]; then
        export NDK_URL=https://dl.google.com/android/repository/android-ndk-$NDK_VERSION-linux-x86_64.zip
      elif [ "$(Agent.OS)" == "Darwin" ]; then
         export NDK_URL=https://dl.google.com/android/repository/android-ndk-$NDK_VERSION-darwin-x86_64.zip
      fi

      cd ..
      curl -fsSL $NDK_URL -o ndk.zip
      unzip -q ndk.zip && rm -f ndk.zip

    displayName: 'Download Android NDK'
    condition: eq( variables['BuildType'], 'DevDist' )

  - script: |
      mkdir ../RenderDoc
      cd ../RenderDoc
      curl -fsSL https://raw.githubusercontent.com/baldurk/renderdoc/v1.x/renderdoc/api/app/renderdoc_app.h -o renderdoc.h

    displayName: 'Download RenderDoc API Header on Linux'
    condition: and( ne( variables['BuildType'], 'DevDist' ), eq( variables['Agent.OS'], 'Linux' ) )

  - script: |
      export CMAKE_ARGS="-B ../nCine-buildtests-$(BuildType) -D CMAKE_BUILD_TYPE=$(BuildType) -D NCINE_BUILD_UNIT_TESTS=ON -D NCINE_BUILD_TESTS=OFF -D NCINE_WITH_IMGUI=OFF"

      if [ "$(Agent.OS)" == "Linux" ]; then
        export CMAKE_ARGS="$CMAKE_ARGS -D CMAKE_PREFIX_PATH=$(pwd)/../nCine-external"
      fi

      cmake $CMAKE_ARGS
      make -j2 -C ../nCine-buildtests-$(BuildType)
      cd ../nCine-buildtests-$(BuildType)
      ctest -j2 --build-config $(BuildType)

    displayName: 'CMake Configuration, Make and Test'
    condition: ne( variables['BuildType'], 'DevDist' )

  - script: |
      export ANDROID_NDK_HOME=$(pwd)/../android-ndk-$NDK_VERSION
      if [[ "$(BuildType)" == "DevDist" ]]; then
        export CMAKE_ARGS="-B ../nCine-build-$(BuildType) -D NCINE_OPTIONS_PRESETS=$(BuildType)"
      else
        export CMAKE_ARGS="-B ../nCine-build-$(BuildType) -D CMAKE_BUILD_TYPE=$(BuildType) -D NCINE_BUILD_BENCHMARKS=ON -D NCINE_WITH_TRACY=ON"
      fi

       if [ "$(Agent.OS)" == "Linux" ]; then
         export CMAKE_ARGS="$CMAKE_ARGS -D NCINE_WITH_RENDERDOC=ON -D RENDERDOC_DIR=$(pwd)/../RenderDoc -D CMAKE_PREFIX_PATH=$(pwd)/../nCine-external"
       fi

       cmake $CMAKE_ARGS

    displayName: 'CMake Configuration'

  - script: |
      make -j2 -C ../nCine-build-$(BuildType)

    displayName: 'Make'

  - script: |
      make package -C ../nCine-build-$(BuildType)

    displayName: 'Package'
    condition: eq( variables['BuildType'], 'DevDist' )

  - script: |
      git config --global user.email "pipelines@azure.com"
      git config --global user.name "Azure Pipelines"

      if [ "$(Agent.OS)" == "Linux" ]; then
        export OS=linux
        export PACKAGE_EXT=tar.gz
      elif [ "$(Agent.OS)" == "Darwin" ]; then
        export OS=darwin
        export CC=appleclang
        export PACKAGE_EXT=dmg
      fi

      cd ..
      export DEPLOY_BRANCH=`echo $DEPLOY_BRANCH | sed 's/BRANCHNAME/'"$(Build.SourceBranchName)"'/'`
      export DEPLOY_BRANCH=`echo $DEPLOY_BRANCH | sed 's/OS/'"$OS"'/'`
      export DEPLOY_BRANCH=`echo $DEPLOY_BRANCH | sed 's/COMPILER/'"$CC"'/'`
      git clone https://$MAPPED_GH_TOKEN@github.com/nCine/nCine-artifacts.git >/dev/null 2>&1
      cd nCine-artifacts
      git checkout $DEPLOY_BRANCH || git checkout --orphan $DEPLOY_BRANCH
      git reset
      git rm *
      mv -f ../nCine-build-$(BuildType)/*.$PACKAGE_EXT .
      git add *.$PACKAGE_EXT
      git commit --amend -m "$(DEPLOY_MESSAGE)" || git commit -m "$(DEPLOY_MESSAGE)"
      git push --force || git push --set-upstream origin $DEPLOY_BRANCH

    displayName: 'Push Artifacts'
    condition: and( eq( variables['BuildType'], 'DevDist' ), succeeded() )
    env:
      MAPPED_GH_TOKEN: $(GH_TOKEN)

- job: Emscripten
  displayName: Emscripten

  strategy:
    matrix:
      Emscripten Debug:
        imageName: 'ubuntu-18.04'
        OS: emscripten
        CC: emcc
        BuildType: Debug

      Emscripten Release:
        imageName: 'ubuntu-18.04'
        OS: emscripten
        CC: emcc
        BuildType: Release

      Emscripten DevDist:
        imageName: 'ubuntu-18.04'
        OS: emscripten
        CC: emcc
        BuildType: DevDist

  pool:
    vmImage: $(imageName)

  steps:
  - script: |
      sudo apt-get update
      sudo apt-get install -y doxygen graphviz

    displayName: 'Install Build Dependencies on Linux'
    condition: and( eq( variables['BuildType'], 'DevDist' ), eq( variables['Agent.OS'], 'Linux' ) )

  - script: |
      curl -fsSL https://cmake.org/files/v3.16/cmake-3.16.9-Linux-x86_64.sh -o cmakeinstall.sh && \
      chmod +x cmakeinstall.sh && \
      sudo ./cmakeinstall.sh --prefix=/usr/local --exclude-subdir && \
      rm cmakeinstall.sh

    displayName: 'Install Latest CMake on Linux'
    condition: eq( variables['Agent.OS'], 'Linux' )

  - script: |
      sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 10

      cd ..
      git clone https://github.com/emscripten-core/emsdk.git
      cd emsdk
      ./emsdk install latest
      ./emsdk activate latest

    displayName: 'Install Emscripten SDK'

  - script: |
      git fetch --unshallow || true

    displayName: 'Unshallow Git Repository for Versioning'
    condition: eq( variables['BuildType'], 'DevDist' )

  - script: |
      export LIBRARIES_BRANCH=`echo $LIBRARIES_BRANCH | sed 's/OS/'"$OS"'/'`
      export LIBRARIES_BRANCH=`echo $LIBRARIES_BRANCH | sed 's/COMPILER/'"$CC"'/'`

      cd ..
      git clone https://github.com/nCine/nCine-libraries-artifacts.git
      cd nCine-libraries-artifacts
      git checkout $LIBRARIES_BRANCH
      LIBRARIES_FILE=$(ls -t | head -n 1) && tar xpzf $LIBRARIES_FILE
      mv nCine-external-emscripten ..
      cd ..
      rm -rf nCine-libraries-artifacts

      git clone https://github.com/nCine/nCine-data.git

    displayName: 'Download nCine-libraries Artifacts and nCine-data'

  - script: |
      source ../emsdk/emsdk_env.sh

      # Not using emcmake to avoid issue #10028 with CMAKE_CROSSCOMPILING_EMULATOR path
      cmake -B ../nCine-buildtests-$(BuildType) -D CMAKE_BUILD_TYPE=$(BuildType) -D NCINE_BUILD_UNIT_TESTS=ON -D NCINE_BUILD_TESTS=OFF -D NCINE_WITH_IMGUI=OFF -D CMAKE_CROSSCOMPILING_EMULATOR=$EMSDK_NODE -D CMAKE_TOOLCHAIN_FILE=$EMSDK/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake

      git config --global user.email "pipelines@azure.com"
      git config --global user.name "Azure Pipelines"
      cd $(Build.SourcesDirectory)

      make -j2 -C ../nCine-buildtests-$(BuildType)
      cd ../nCine-buildtests-$(BuildType)
      ctest -j2 --build-config $(BuildType)

    displayName: 'CMake Configuration, Make and Test'
    condition: ne( variables['BuildType'], 'DevDist' )

  - script: |
      source ../emsdk/emsdk_env.sh

      if [[ "$(BuildType)" == "DevDist" ]]; then
        export CMAKE_ARGS="-B ../nCine-build-$(BuildType) -D NCINE_OPTIONS_PRESETS=$(BuildType)"
      else
        export CMAKE_ARGS="-B ../nCine-build-$(BuildType) -D CMAKE_BUILD_TYPE=$(BuildType)"
      fi

      emcmake cmake $CMAKE_ARGS

    displayName: 'CMake Configuration'

  - script: |
      make -j2 -C ../nCine-build-$(BuildType)

    displayName: 'Make'

  - script: |
      make package -C ../nCine-build-$(BuildType)

    displayName: 'Package'
    condition: eq( variables['BuildType'], 'DevDist' )

  - script: |
      git config --global user.email "pipelines@azure.com"
      git config --global user.name "Azure Pipelines"

      cd ..
      export DEPLOY_BRANCH=`echo $DEPLOY_BRANCH | sed 's/BRANCHNAME/'"$(Build.SourceBranchName)"'/'`
      export DEPLOY_BRANCH=`echo $DEPLOY_BRANCH | sed 's/OS/'"$OS"'/'`
      export DEPLOY_BRANCH=`echo $DEPLOY_BRANCH | sed 's/COMPILER/'"$CC"'/'`
      git clone https://$MAPPED_GH_TOKEN@github.com/nCine/nCine-artifacts.git >/dev/null 2>&1
      cd nCine-artifacts
      git checkout $DEPLOY_BRANCH || git checkout --orphan $DEPLOY_BRANCH
      git reset
      git rm *
      mv -f ../nCine-build-$(BuildType)/*.tar.gz .
      git add *.tar.gz
      git commit --amend -m "$(DEPLOY_MESSAGE)" || git commit -m "$(DEPLOY_MESSAGE)"
      git push --force || git push --set-upstream origin $DEPLOY_BRANCH

    displayName: 'Push Artifacts'
    condition: and( eq( variables['BuildType'], 'DevDist' ), succeeded() )
    env:
      MAPPED_GH_TOKEN: $(GH_TOKEN)

- job: Windows_MinGW
  displayName: Windows and MinGW

  strategy:
    matrix:
      VS2017 Debug:
        imageName: 'vs2017-win2016'
        Compiler: vs2017
        BuildType: Debug

      VS2017 Release:
        imageName: 'vs2017-win2016'
        Compiler: vs2017
        BuildType: Release

      VS2017 DevDist:
        imageName: 'vs2017-win2016'
        Compiler: vs2017
        BuildType: DevDist

      VS2019 Debug:
        imageName: 'windows-2019'
        Compiler: vs2019
        BuildType: Debug

      VS2019 Release:
        imageName: 'windows-2019'
        Compiler: vs2019
        BuildType: Release

      VS2019 DevDist:
        imageName: 'windows-2019'
        Compiler: vs2019
        BuildType: DevDist

      MinGW GCC Debug:
        imageName: 'vs2017-win2016'
        Compiler: mingw64
        CC: gcc
        CXX: g++
        BuildType: Debug

      MinGW GCC Release:
        imageName: 'vs2017-win2016'
        Compiler: mingw64
        CC: gcc
        CXX: g++
        BuildType: Release

      MinGW GCC DevDist:
        imageName: 'vs2017-win2016'
        Compiler: mingw64
        CC: gcc
        CXX: g++
        BuildType: DevDist

      MinGW Clang Debug:
        imageName: 'vs2017-win2016'
        Compiler: mingw64
        CC: clang
        CXX: clang++
        BuildType: Debug

      MinGW Clang Release:
        imageName: 'vs2017-win2016'
        Compiler: mingw64
        CC: clang
        CXX: clang++
        BuildType: Release

      MinGW Clang DevDist:
        imageName: 'vs2017-win2016'
        Compiler: mingw64
        CC: clang
        CXX: clang++
        BuildType: DevDist

  pool:
    vmImage: $(imageName)

  steps:
  - powershell: |
      choco install -y --no-progress doxygen.install
      choco install -y --no-progress graphviz

    displayName: 'Install Build Dependencies on Windows'
    condition: and( eq( variables['BuildType'], 'DevDist' ), ne( variables['Compiler'], 'mingw64' ) )

  - powershell: |
      choco install --no-progress msys2 --params="/InstallDir:C:\msys64 /NoUpdate /NoPath"
      C:\msys64\usr\bin\pacman --noconfirm -Syy

    displayName: 'Install and Update MSYS2 on Windows'
    condition: eq( variables['Compiler'], 'mingw64' )

  - powershell: |
      C:\msys64\usr\bin\pacman --noconfirm -S mingw-w64-x86_64-glew mingw-w64-x86_64-glfw mingw-w64-x86_64-SDL2 mingw-w64-x86_64-openal mingw-w64-x86_64-libvorbis mingw-w64-x86_64-libwebp mingw-w64-x86_64-lua mingw-w64-x86_64-cmake make

      if ($env:BuildType -eq "DevDist") { C:\msys64\usr\bin\pacman --noconfirm -S doxygen }

      if ($env:CC -eq "gcc") { C:\msys64\usr\bin\pacman --noconfirm -S mingw-w64-x86_64-gcc }
      else { C:\msys64\usr\bin\pacman --noconfirm -S mingw-w64-x86_64-clang }

      C:\msys64\usr\bin\pacman --noconfirm -Scc

    displayName: 'Install Build Dependencies on MinGW'
    condition: eq( variables['Compiler'], 'mingw64' )

  - powershell: |
      $env:GIT_REDIRECT_STDERR = '2>&1'
      git fetch --unshallow; if (-not $?) { return }

    displayName: 'Unshallow Git Repository for Versioning'
    condition: eq( variables['BuildType'], 'DevDist' )

  - powershell: |
      $env:GIT_REDIRECT_STDERR = '2>&1'
      $env:vsversion = switch ("$(imageName)")
      {
        "windows-2019" {"vs2019"}
        "vs2017-win2016" {"vs2017"}
      }

      cd ..
      git clone https://github.com/nCine/nCine-libraries-artifacts.git
      cd nCine-libraries-artifacts

      if ($env:Compiler -ne "mingw64")
      {
        $env:LIBRARIES_BRANCH = $env:LIBRARIES_BRANCH -replace "OS","windows" -replace "COMPILER",$env:vsversion
        git checkout $env:LIBRARIES_BRANCH
        $env:LIBRARIES_FILE = Get-ChildItem -Path $(pwd) -Name -File | Select-Object -First 1
        7z x $env:LIBRARIES_FILE

        Move-Item -Path nCine-external -Destination ..
      }

      git checkout android-libraries-armeabi-v7a
      $env:LIBRARIES_FILE = Get-ChildItem -Path $(pwd) -Filter *.gz -Name -File | Select-Object -First 1
      7z x $env:LIBRARIES_FILE
      $env:LIBRARIES_FILE = $env:LIBRARIES_FILE -replace ".gz",""
      7z x $env:LIBRARIES_FILE -aos

      git checkout android-libraries-arm64-v8a
      $env:LIBRARIES_FILE = Get-ChildItem -Path $(pwd) -Filter *.gz -Name -File | Select-Object -First 1
      7z x $env:LIBRARIES_FILE
      $env:LIBRARIES_FILE = $env:LIBRARIES_FILE -replace ".gz",""
      7z x $env:LIBRARIES_FILE -aos

      git checkout android-libraries-x86_64
      $env:LIBRARIES_FILE = Get-ChildItem -Path $(pwd) -Filter *.gz -Name -File | Select-Object -First 1
      7z x $env:LIBRARIES_FILE
      $env:LIBRARIES_FILE = $env:LIBRARIES_FILE -replace ".gz",""
      7z x $env:LIBRARIES_FILE -aos

      Move-Item -Path nCine-android-external -Destination ..
      cd ..
      Remove-Item nCine-libraries-artifacts -Recurse -Force

      git clone https://github.com/nCine/nCine-data.git

    displayName: 'Download nCine-libraries Artifacts and nCine-data'

  - powershell: |
      cd ..
      Remove-item alias:curl
      curl -fsSL https://dl.google.com/android/repository/android-ndk-$env:NDK_VERSION-windows-x86_64.zip -o ndk.zip
      7z x ndk.zip
      Remove-Item ndk.zip

    displayName: 'Download Android NDK'
    condition: eq( variables['BuildType'], 'DevDist' )

  - powershell: |
      mkdir ..\RenderDoc
      cd ..\RenderDoc
      Remove-item alias:curl
      curl -fsSL https://raw.githubusercontent.com/baldurk/renderdoc/v1.x/renderdoc/api/app/renderdoc_app.h -o renderdoc_app.h

    displayName: 'Download RenderDoc API Header'
    condition: ne( variables['BuildType'], 'DevDist' )

  - powershell: |
      $env:generator = switch ("$(imageName)")
      {
        "windows-2019" {"Visual Studio 16 2019"}
        "vs2017-win2016" {"Visual Studio 15 2017"}
      }

      cmake -G "$env:generator" -A x64 -B ../nCine-buildtests-$(BuildType) -D NCINE_BUILD_UNIT_TESTS=ON -D NCINE_BUILD_TESTS=OFF -D NCINE_WITH_IMGUI=OFF
      cmake --build ../nCine-buildtests-$(BuildType) --config $(BuildType)
      cd ../nCine-buildtests-$(BuildType)
      ctest -j2 --build-config $(BuildType)

    displayName: 'CMake Configuration, Build and Test on Windows'
    condition: and( ne( variables['BuildType'], 'DevDist' ), ne( variables['Compiler'], 'mingw64' ) )

  - powershell: |
      $env:PATH = "C:\msys64\usr\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem"
      $env:MSYSTEM = "MINGW64"

      C:\msys64\usr\bin\bash.exe -lc 'cmake -G \"MSYS Makefiles\" -B ../nCine-buildtests-$(BuildType) -D CMAKE_BUILD_TYPE=$(BuildType) -D NCINE_BUILD_UNIT_TESTS=ON -D NCINE_BUILD_TESTS=OFF -D NCINE_WITH_IMGUI=OFF'
      C:\msys64\usr\bin\bash.exe -lc 'make -j2 -C ../nCine-buildtests-$(BuildType)'
      cd ..\nCine-buildtests-$(BuildType)
      C:\msys64\usr\bin\bash.exe -lc 'ctest -j2 --build-config $(BuildType)'

    displayName: 'CMake Configuration, Make and Test on MinGW'
    condition: and( ne( variables['BuildType'], 'DevDist' ), eq( variables['Compiler'], 'mingw64') )
    env:
      CHERE_INVOKING: on

  - powershell: |
      $env:ANDROID_NDK_HOME = "$(pwd)/../android-ndk-$env:NDK_VERSION"

      $env:generator = switch ("$(imageName)")
      {
        "windows-2019" {"Visual Studio 16 2019"}
        "vs2017-win2016" {"Visual Studio 15 2017"}
      }

      if ($env:BuildType -eq "DevDist")
        { cmake -G "$env:generator" -A x64 -B ../nCine-build-$(BuildType) -D NCINE_OPTIONS_PRESETS=$(BuildType) }
      else
        { cmake -G "$env:generator" -A x64 -B ../nCine-build-$(BuildType) -D NCINE_BUILD_BENCHMARKS=ON -D NCINE_WITH_TRACY=ON -D NCINE_WITH_RENDERDOC=ON -D RENDERDOC_DIR=$(pwd)/../RenderDoc }

    displayName: 'CMake Configuration on Windows'
    condition: ne( variables['Compiler'], 'mingw64' )

  - powershell: |
      $env:ANDROID_NDK_HOME = "$(pwd)/../android-ndk-$env:NDK_VERSION"

      $env:PATH = "C:\msys64\usr\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem"
      $env:MSYSTEM = "MINGW64"

      $EnableTracy = 'ON'
      if ($env:CC -eq "clang")
        { $EnableTracy = 'OFF' }

      if ($env:BuildType -eq "DevDist")
        { C:\msys64\usr\bin\bash.exe -lc 'cmake -G \"MSYS Makefiles\" -B ../nCine-build-$(BuildType) -D NCINE_OPTIONS_PRESETS=$(BuildType)' }
      else
        { C:\msys64\usr\bin\bash.exe -lc 'cmake -G \"MSYS Makefiles\" -B ../nCine-build-$(BuildType) -D CMAKE_BUILD_TYPE=$(BuildType) -D NCINE_BUILD_BENCHMARKS=ON -D NCINE_WITH_TRACY=$EnableTracy -D NCINE_WITH_RENDERDOC=ON -D RENDERDOC_DIR=$PWD/../RenderDoc' }

    displayName: 'CMake Configuration on MinGW'
    condition: eq( variables['Compiler'], 'mingw64' )
    env:
      CHERE_INVOKING: on

  - powershell: |
      if ($env:BuildType -eq "DevDist")
        { cmake --build ../nCine-build-$(BuildType) --config Release }
      else
        { cmake --build ../nCine-build-$(BuildType) --config $(BuildType) }

    displayName: 'CMake Build on Windows'
    condition: ne( variables['Compiler'], 'mingw64' )

  - powershell: |
      $env:PATH = "C:\msys64\x86_64\bin;C:\msys64\usr\bin;$env:PATH"
      $env:MSYSTEM = "MINGW64"
      C:\msys64\usr\bin\bash.exe -lc 'make -j2 -C ../nCine-build-$(BuildType)'

    displayName: 'Make on MinGW'
    condition: eq( variables['Compiler'], 'mingw64' )
    env:
      CHERE_INVOKING: on

  - powershell: |
      cmake --build ../nCine-build-$(BuildType) --config Release --target package

    displayName: 'Package on Windows'
    condition: and( eq( variables['BuildType'], 'DevDist' ), ne( variables['Compiler'], 'mingw64' ) )

  - powershell: |
      $env:PATH = "C:\msys64\usr\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem"
      $env:MSYSTEM = "MINGW64"
      $env:CHERE_INVOKING = 1

      C:\msys64\usr\bin\bash.exe -lc 'make package -C ../nCine-build-$(BuildType)'

    displayName: 'Package on MinGW'
    condition: and( eq( variables['BuildType'], 'DevDist' ), eq( variables['Compiler'], 'mingw64' ) )

  - powershell: |
      $env:GIT_REDIRECT_STDERR = '2>&1'
      git config --global user.email "pipelines@azure.com"
      git config --global user.name "Azure Pipelines"

      $env:vsversion = switch ("$(imageName)")
      {
        "windows-2019" {"vs2019"}
        "vs2017-win2016" {"vs2017"}
      }

      $env:DEPLOY_BRANCH = $env:DEPLOY_BRANCH -replace "BRANCHNAME","$(Build.SourceBranchName)"
      if ($env:Compiler -ne "mingw64")
        { $env:DEPLOY_BRANCH = $env:DEPLOY_BRANCH -replace "OS","windows" -replace "COMPILER",$env:vsversion }
      else
        { $env:DEPLOY_BRANCH = $env:DEPLOY_BRANCH -replace "OS","mingw64" -replace "COMPILER",$env:CC }

      cd ..
      git clone https://$env:MAPPED_GH_TOKEN@github.com/nCine/nCine-artifacts.git 2>&1>$null
      cd nCine-artifacts
      git checkout $env:DEPLOY_BRANCH; if (-not $?) { git checkout --orphan $env:DEPLOY_BRANCH }
      git reset
      git rm *

      if ($env:Compiler -ne "mingw64")
      {
        Move-Item -Path ..\nCine-build-$(BuildType)\*.exe -Destination .
        Move-Item -Path ..\nCine-build-$(BuildType)\*.zip -Destination .
        git add *.exe *.zip
      }
      else
      {
        Move-Item -Path ..\nCine-build-$(BuildType)\*.tar.gz -Destination .
        git add *.tar.gz
      }

      git commit --amend -m "$env:DEPLOY_MESSAGE"; if (-not $?) { git commit -m "$env:DEPLOY_MESSAGE" }
      git push --force; if (-not $?) { git push --set-upstream origin $env:DEPLOY_BRANCH }

    displayName: 'Push Artifacts'
    condition: and( eq( variables['BuildType'], 'DevDist' ), succeeded() )
    env:
      MAPPED_GH_TOKEN: $(GH_TOKEN)
